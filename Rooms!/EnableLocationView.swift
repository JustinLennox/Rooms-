//
// EnableLocationView.swift
// Generated by Core Animator version 1.2.4 on 12/15/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

protocol EnableLocationViewDelegate: class {
	func allowButtonPressed(allowButton: UIButton)
}

@IBDesignable
class EnableLocationView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 736))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	weak var enableLocationViewDelegate: EnableLocationViewDelegate?

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:736)
		__scaling__.center = CGPoint(x:207.0, y:368.0)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let locationBackground = UIImageView()
		locationBackground.bounds = CGRect(x:0, y:0, width:414.0, height:736.0)
		var imgLocationBackground: UIImage!
		if let imagePath = bundle.pathForResource("LocationBackground.png", ofType:nil) {
			imgLocationBackground = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'LocationBackground.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		locationBackground.image = imgLocationBackground
		locationBackground.contentMode = .Center;
		locationBackground.layer.position = CGPoint(x:207.000, y:368.000)
		__scaling__.addSubview(locationBackground)
		viewsByName["LocationBackground"] = locationBackground

		let enable = UIImageView()
		enable.bounds = CGRect(x:0, y:0, width:1176.0, height:322.0)
		var imgEnable: UIImage!
		if let imagePath = bundle.pathForResource("Enable.png", ofType:nil) {
			imgEnable = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Enable.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		enable.image = imgEnable
		enable.contentMode = .Center;
		enable.layer.position = CGPoint(x:207.000, y:87.807)
		enable.transform = CGAffineTransformMakeScale(0.33, 0.33)
		__scaling__.addSubview(enable)
		viewsByName["Enable"] = enable

		let floatingIce00 = UIImageView()
		floatingIce00.bounds = CGRect(x:0, y:0, width:764.0, height:346.0)
		var imgFloatingIce00: UIImage!
		if let imagePath = bundle.pathForResource("Floating_Ice_00.png", ofType:nil) {
			imgFloatingIce00 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Floating_Ice_00.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		floatingIce00.image = imgFloatingIce00
		floatingIce00.contentMode = .Center;
		floatingIce00.layer.position = CGPoint(x:207.000, y:550.214)
		floatingIce00.alpha = 0.00
		floatingIce00.transform = CGAffineTransformMakeScale(0.39, 0.39)
		__scaling__.addSubview(floatingIce00)
		viewsByName["Floating_Ice_00"] = floatingIce00

		let floatingIce02 = UIImageView()
		floatingIce02.bounds = CGRect(x:0, y:0, width:332.0, height:100.0)
		var imgFloatingIce02: UIImage!
		if let imagePath = bundle.pathForResource("Floating_Ice_02.png", ofType:nil) {
			imgFloatingIce02 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Floating_Ice_02.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		floatingIce02.image = imgFloatingIce02
		floatingIce02.contentMode = .Center;
		floatingIce02.layer.position = CGPoint(x:501.732, y:454.080)
		floatingIce02.transform = CGAffineTransformMakeScale(0.53, 0.53)
		__scaling__.addSubview(floatingIce02)
		viewsByName["Floating_Ice_02"] = floatingIce02

		let floatingIce01 = UIImageView()
		floatingIce01.bounds = CGRect(x:0, y:0, width:243.0, height:138.0)
		var imgFloatingIce01: UIImage!
		if let imagePath = bundle.pathForResource("Floating_Ice_01.png", ofType:nil) {
			imgFloatingIce01 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Floating_Ice_01.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		floatingIce01.image = imgFloatingIce01
		floatingIce01.contentMode = .Center;
		floatingIce01.layer.position = CGPoint(x:-43.350, y:419.374)
		floatingIce01.transform = CGAffineTransformMakeScale(0.36, 0.36)
		__scaling__.addSubview(floatingIce01)
		viewsByName["Floating_Ice_01"] = floatingIce01

		let locationPenguin = UIImageView()
		locationPenguin.bounds = CGRect(x:0, y:0, width:600.0, height:600.0)
		locationPenguin.layer.anchorPoint = CGPoint(x:0.497, y:1.003)
		var imgLocationPenguin: UIImage!
		if let imagePath = bundle.pathForResource("LocationPenguin.png", ofType:nil) {
			imgLocationPenguin = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'LocationPenguin.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		locationPenguin.image = imgLocationPenguin
		locationPenguin.contentMode = .Center;
		locationPenguin.layer.position = CGPoint(x:413.411, y:2.099)
		locationPenguin.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(0.47), 0.29, 0.29)
		__scaling__.addSubview(locationPenguin)
		viewsByName["LocationPenguin"] = locationPenguin

		let allowButton = UIButton(type: .Custom)
		allowButton.bounds = CGRect(x:0, y:0, width:786.0, height:119.0)
		var imgAllowButton: UIImage!
		if let imagePath = bundle.pathForResource("Allow_Button.png", ofType:nil) {
			imgAllowButton = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Allow_Button.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		allowButton.setBackgroundImage(imgAllowButton, forState:.Normal)
		allowButton.contentMode = .Center;
		allowButton.layer.position = CGPoint(x:207.000, y:704.127)
		allowButton.transform = CGAffineTransformMakeScale(0.47, 0.47)
		allowButton.addTarget(self, action:"actionAllowButtonPressed:", forControlEvents: .TouchUpInside)
		__scaling__.addSubview(allowButton)
		viewsByName["Allow_Button"] = allowButton

		self.viewsByName = viewsByName
	}

	// - MARK: AmbientAnimation

	func addAmbientAnimation() {
		addAmbientAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addAmbientAnimation(completion: ((Bool) -> Void)?) {
		addAmbientAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addAmbientAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addAmbientAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addAmbientAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addAmbientAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addAmbientAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 40.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "AmbientAnimation")
			self.animationCompletions[layer.animationForKey("AmbientAnimation")!] = complete
		}

		let locationPenguinRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		locationPenguinRotationAnimation.duration = 40.000
		locationPenguinRotationAnimation.values = [0.332 as Float, 0.332 as Float]
		locationPenguinRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		locationPenguinRotationAnimation.timingFunctions = [linearTiming]
		locationPenguinRotationAnimation.beginTime = beginTime
		locationPenguinRotationAnimation.fillMode = fillMode
		locationPenguinRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LocationPenguin"]?.layer.addAnimation(locationPenguinRotationAnimation, forKey:"AmbientAnimation_Rotation")

		let locationPenguinTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		locationPenguinTranslationXAnimation.duration = 40.000
		locationPenguinTranslationXAnimation.values = [-216.087 as Float, -216.087 as Float]
		locationPenguinTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		locationPenguinTranslationXAnimation.timingFunctions = [linearTiming]
		locationPenguinTranslationXAnimation.beginTime = beginTime
		locationPenguinTranslationXAnimation.fillMode = fillMode
		locationPenguinTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LocationPenguin"]?.layer.addAnimation(locationPenguinTranslationXAnimation, forKey:"AmbientAnimation_TranslationX")

		let locationPenguinTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		locationPenguinTranslationYAnimation.duration = 1.500
		locationPenguinTranslationYAnimation.values = [538.741 as Float, 542.741 as Float, 538.741 as Float]
		locationPenguinTranslationYAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		locationPenguinTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		locationPenguinTranslationYAnimation.repeatCount = HUGE
		locationPenguinTranslationYAnimation.beginTime = beginTime
		locationPenguinTranslationYAnimation.fillMode = fillMode
		locationPenguinTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LocationPenguin"]?.layer.addAnimation(locationPenguinTranslationYAnimation, forKey:"AmbientAnimation_TranslationY")

		let floatingIce02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		floatingIce02TranslationXAnimation.duration = 40.000
		floatingIce02TranslationXAnimation.values = [-90.000 as Float, -370.000 as Float, -90.000 as Float]
		floatingIce02TranslationXAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		floatingIce02TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		floatingIce02TranslationXAnimation.repeatCount = HUGE
		floatingIce02TranslationXAnimation.beginTime = beginTime
		floatingIce02TranslationXAnimation.fillMode = fillMode
		floatingIce02TranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_02"]?.layer.addAnimation(floatingIce02TranslationXAnimation, forKey:"AmbientAnimation_TranslationX")

		let floatingIce00OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		floatingIce00OpacityAnimation.duration = 40.000
		floatingIce00OpacityAnimation.values = [1.000 as Float, 1.000 as Float]
		floatingIce00OpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		floatingIce00OpacityAnimation.timingFunctions = [linearTiming]
		floatingIce00OpacityAnimation.beginTime = beginTime
		floatingIce00OpacityAnimation.fillMode = fillMode
		floatingIce00OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_00"]?.layer.addAnimation(floatingIce00OpacityAnimation, forKey:"AmbientAnimation_Opacity")

		let floatingIce00TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		floatingIce00TranslationYAnimation.duration = 1.500
		floatingIce00TranslationYAnimation.values = [-2.000 as Float, 2.000 as Float, -2.000 as Float]
		floatingIce00TranslationYAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		floatingIce00TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		floatingIce00TranslationYAnimation.repeatCount = HUGE
		floatingIce00TranslationYAnimation.beginTime = beginTime
		floatingIce00TranslationYAnimation.fillMode = fillMode
		floatingIce00TranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_00"]?.layer.addAnimation(floatingIce00TranslationYAnimation, forKey:"AmbientAnimation_TranslationY")

		let floatingIce01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		floatingIce01TranslationXAnimation.duration = 40.000
		floatingIce01TranslationXAnimation.values = [77.000 as Float, 367.000 as Float, 77.000 as Float]
		floatingIce01TranslationXAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		floatingIce01TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		floatingIce01TranslationXAnimation.repeatCount = HUGE
		floatingIce01TranslationXAnimation.beginTime = beginTime
		floatingIce01TranslationXAnimation.fillMode = fillMode
		floatingIce01TranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_01"]?.layer.addAnimation(floatingIce01TranslationXAnimation, forKey:"AmbientAnimation_TranslationX")

		let allowButtonOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		allowButtonOpacityAnimation.duration = 40.000
		allowButtonOpacityAnimation.values = [1.000 as Float, 1.000 as Float]
		allowButtonOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		allowButtonOpacityAnimation.timingFunctions = [linearTiming]
		allowButtonOpacityAnimation.beginTime = beginTime
		allowButtonOpacityAnimation.fillMode = fillMode
		allowButtonOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Allow_Button"]?.layer.addAnimation(allowButtonOpacityAnimation, forKey:"AmbientAnimation_Opacity")

		let allowButtonTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		allowButtonTranslationYAnimation.duration = 40.000
		allowButtonTranslationYAnimation.values = [-28.000 as Float, -28.000 as Float]
		allowButtonTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		allowButtonTranslationYAnimation.timingFunctions = [linearTiming]
		allowButtonTranslationYAnimation.beginTime = beginTime
		allowButtonTranslationYAnimation.fillMode = fillMode
		allowButtonTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Allow_Button"]?.layer.addAnimation(allowButtonTranslationYAnimation, forKey:"AmbientAnimation_TranslationY")
	}

	func removeAmbientAnimation() {
		self.layer.removeAnimationForKey("AmbientAnimation")
		self.viewsByName["LocationPenguin"]?.layer.removeAnimationForKey("AmbientAnimation_Rotation")
		self.viewsByName["LocationPenguin"]?.layer.removeAnimationForKey("AmbientAnimation_TranslationX")
		self.viewsByName["LocationPenguin"]?.layer.removeAnimationForKey("AmbientAnimation_TranslationY")
		self.viewsByName["Floating_Ice_02"]?.layer.removeAnimationForKey("AmbientAnimation_TranslationX")
		self.viewsByName["Floating_Ice_00"]?.layer.removeAnimationForKey("AmbientAnimation_Opacity")
		self.viewsByName["Floating_Ice_00"]?.layer.removeAnimationForKey("AmbientAnimation_TranslationY")
		self.viewsByName["Floating_Ice_01"]?.layer.removeAnimationForKey("AmbientAnimation_TranslationX")
		self.viewsByName["Allow_Button"]?.layer.removeAnimationForKey("AmbientAnimation_Opacity")
		self.viewsByName["Allow_Button"]?.layer.removeAnimationForKey("AmbientAnimation_TranslationY")
	}

	// - MARK: EnableLocationAnimation

	func addEnableLocationAnimation() {
		addEnableLocationAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addEnableLocationAnimation(completion: ((Bool) -> Void)?) {
		addEnableLocationAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addEnableLocationAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addEnableLocationAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addEnableLocationAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addEnableLocationAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addEnableLocationAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.975
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "EnableLocationAnimation")
			self.animationCompletions[layer.animationForKey("EnableLocationAnimation")!] = complete
		}

		let locationPenguinRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		locationPenguinRotationAnimation.duration = 1.975
		locationPenguinRotationAnimation.values = [0.475 as Float, 0.475 as Float, 0.471 as Float, 0.122 as Float, 0.383 as Float, 0.214 as Float, 0.325 as Float]
		locationPenguinRotationAnimation.keyTimes = [0.000 as Float, 0.747 as Float, 0.747 as Float, 0.823 as Float, 0.886 as Float, 0.949 as Float, 1.000 as Float]
		locationPenguinRotationAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		locationPenguinRotationAnimation.beginTime = beginTime
		locationPenguinRotationAnimation.fillMode = fillMode
		locationPenguinRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LocationPenguin"]?.layer.addAnimation(locationPenguinRotationAnimation, forKey:"EnableLocationAnimation_Rotation")

		let locationPenguinTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		locationPenguinTranslationXAnimation.duration = 1.975
		locationPenguinTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float, -216.087 as Float, -216.087 as Float]
		locationPenguinTranslationXAnimation.keyTimes = [0.000 as Float, 0.595 as Float, 0.595 as Float, 0.747 as Float, 1.000 as Float]
		locationPenguinTranslationXAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming]
		locationPenguinTranslationXAnimation.beginTime = beginTime
		locationPenguinTranslationXAnimation.fillMode = fillMode
		locationPenguinTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LocationPenguin"]?.layer.addAnimation(locationPenguinTranslationXAnimation, forKey:"EnableLocationAnimation_TranslationX")

		let locationPenguinTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		locationPenguinTranslationYAnimation.duration = 1.975
		locationPenguinTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float, 540.741 as Float, 543.741 as Float, 537.741 as Float, 542.741 as Float, 538.741 as Float, 538.741 as Float]
		locationPenguinTranslationYAnimation.keyTimes = [0.000 as Float, 0.595 as Float, 0.595 as Float, 0.747 as Float, 0.823 as Float, 0.886 as Float, 0.937 as Float, 0.987 as Float, 1.000 as Float]
		locationPenguinTranslationYAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, overshootTiming, overshootTiming, overshootTiming, overshootTiming, linearTiming]
		locationPenguinTranslationYAnimation.beginTime = beginTime
		locationPenguinTranslationYAnimation.fillMode = fillMode
		locationPenguinTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["LocationPenguin"]?.layer.addAnimation(locationPenguinTranslationYAnimation, forKey:"EnableLocationAnimation_TranslationY")

		let floatingIce02TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		floatingIce02TranslationXAnimation.duration = 1.975
		floatingIce02TranslationXAnimation.values = [0.000 as Float, -90.000 as Float, -90.000 as Float]
		floatingIce02TranslationXAnimation.keyTimes = [0.000 as Float, 0.380 as Float, 1.000 as Float]
		floatingIce02TranslationXAnimation.timingFunctions = [easeOutTiming, linearTiming]
		floatingIce02TranslationXAnimation.beginTime = beginTime
		floatingIce02TranslationXAnimation.fillMode = fillMode
		floatingIce02TranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_02"]?.layer.addAnimation(floatingIce02TranslationXAnimation, forKey:"EnableLocationAnimation_TranslationX")

		let floatingIce00OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		floatingIce00OpacityAnimation.duration = 1.975
		floatingIce00OpacityAnimation.values = [0.000 as Float, 1.000 as Float, 1.000 as Float]
		floatingIce00OpacityAnimation.keyTimes = [0.000 as Float, 0.620 as Float, 1.000 as Float]
		floatingIce00OpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		floatingIce00OpacityAnimation.beginTime = beginTime
		floatingIce00OpacityAnimation.fillMode = fillMode
		floatingIce00OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_00"]?.layer.addAnimation(floatingIce00OpacityAnimation, forKey:"EnableLocationAnimation_Opacity")

		let floatingIce00TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		floatingIce00TranslationYAnimation.duration = 1.975
		floatingIce00TranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float, 3.000 as Float, -3.000 as Float, 2.000 as Float, -2.000 as Float, -2.000 as Float]
		floatingIce00TranslationYAnimation.keyTimes = [0.000 as Float, 0.747 as Float, 0.747 as Float, 0.823 as Float, 0.886 as Float, 0.937 as Float, 0.987 as Float, 1.000 as Float]
		floatingIce00TranslationYAnimation.timingFunctions = [instantTiming, instantTiming, overshootTiming, overshootTiming, overshootTiming, overshootTiming, linearTiming]
		floatingIce00TranslationYAnimation.beginTime = beginTime
		floatingIce00TranslationYAnimation.fillMode = fillMode
		floatingIce00TranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_00"]?.layer.addAnimation(floatingIce00TranslationYAnimation, forKey:"EnableLocationAnimation_TranslationY")

		let floatingIce01TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		floatingIce01TranslationXAnimation.duration = 1.975
		floatingIce01TranslationXAnimation.values = [0.000 as Float, 77.000 as Float, 77.000 as Float]
		floatingIce01TranslationXAnimation.keyTimes = [0.000 as Float, 0.380 as Float, 1.000 as Float]
		floatingIce01TranslationXAnimation.timingFunctions = [easeOutTiming, linearTiming]
		floatingIce01TranslationXAnimation.beginTime = beginTime
		floatingIce01TranslationXAnimation.fillMode = fillMode
		floatingIce01TranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Floating_Ice_01"]?.layer.addAnimation(floatingIce01TranslationXAnimation, forKey:"EnableLocationAnimation_TranslationX")

		let allowButtonOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		allowButtonOpacityAnimation.duration = 1.975
		allowButtonOpacityAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 1.000 as Float]
		allowButtonOpacityAnimation.keyTimes = [0.000 as Float, 0.595 as Float, 0.785 as Float, 1.000 as Float]
		allowButtonOpacityAnimation.timingFunctions = [overshootTiming, linearTiming, linearTiming]
		allowButtonOpacityAnimation.beginTime = beginTime
		allowButtonOpacityAnimation.fillMode = fillMode
		allowButtonOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Allow_Button"]?.layer.addAnimation(allowButtonOpacityAnimation, forKey:"EnableLocationAnimation_Opacity")

		let allowButtonTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		allowButtonTranslationYAnimation.duration = 1.975
		allowButtonTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, -28.000 as Float, -28.000 as Float]
		allowButtonTranslationYAnimation.keyTimes = [0.000 as Float, 0.595 as Float, 0.785 as Float, 1.000 as Float]
		allowButtonTranslationYAnimation.timingFunctions = [overshootTiming, overshootTiming, linearTiming]
		allowButtonTranslationYAnimation.beginTime = beginTime
		allowButtonTranslationYAnimation.fillMode = fillMode
		allowButtonTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Allow_Button"]?.layer.addAnimation(allowButtonTranslationYAnimation, forKey:"EnableLocationAnimation_TranslationY")
	}

	func removeEnableLocationAnimation() {
		self.layer.removeAnimationForKey("EnableLocationAnimation")
		self.viewsByName["LocationPenguin"]?.layer.removeAnimationForKey("EnableLocationAnimation_Rotation")
		self.viewsByName["LocationPenguin"]?.layer.removeAnimationForKey("EnableLocationAnimation_TranslationX")
		self.viewsByName["LocationPenguin"]?.layer.removeAnimationForKey("EnableLocationAnimation_TranslationY")
		self.viewsByName["Floating_Ice_02"]?.layer.removeAnimationForKey("EnableLocationAnimation_TranslationX")
		self.viewsByName["Floating_Ice_00"]?.layer.removeAnimationForKey("EnableLocationAnimation_Opacity")
		self.viewsByName["Floating_Ice_00"]?.layer.removeAnimationForKey("EnableLocationAnimation_TranslationY")
		self.viewsByName["Floating_Ice_01"]?.layer.removeAnimationForKey("EnableLocationAnimation_TranslationX")
		self.viewsByName["Allow_Button"]?.layer.removeAnimationForKey("EnableLocationAnimation_Opacity")
		self.viewsByName["Allow_Button"]?.layer.removeAnimationForKey("EnableLocationAnimation_TranslationY")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("EnableLocationAnimation")
		self.layer.removeAnimationForKey("AmbientAnimation")
	}

	func actionAllowButtonPressed(allowButton: UIButton) {
		enableLocationViewDelegate?.allowButtonPressed(allowButton)
	}
}